using System;
using System.Data;
using System.Data.Common;
using Utility;
using Types;

namespace Middleware;

/// <summary>
/// This class is essentially a wrapper around every POST request that needs to insert data in database
/// Company information are stored on demand when a user ask for a service provided by the API backend.
/// </summary>
public class AuthenticatedPostTransaction : IDisposable {
    private DbDataSource dataSource;
    private readonly User user;
    public struct BatchItem {}

    public AuthenticatedPostTransaction(DbDataSource dataSource, User user) {
        this.dataSource = dataSource;
        this.user = user;
    }

    /// <summary>
    /// This method is called to make sure that an exception is related to a foreign key violation
    /// generated by an insert/update operation on db schema referring to a company that does not exist yet
    /// </summary>
    /// <param name="e">Database exception</param>
    /// <returns></returns>
    public bool ExceptionIsForeignKeyViolationCompany(DbException e) {
        return (
            e.Message.Contains("foreign key constraint") &&
            (
                e.Message.Contains("company") ||
                e.Message.Contains("company_far") ||
                e.Message.Contains("company_wsp")
            )
        );
    }

    /// <summary>
    /// Update company and company_<type> tables in database
    /// Inside this method, there is a self closing transaction that will rollback if an error occurs
    /// API backend is a microservice that leverages on Bearer JWT tokens for authenticating users.
    /// Tokens are issued from authorization microservice (AUTH backend)
    /// and that is the only microservices that knows the relation between a user and a company.
    /// Each time a POST request is made to API backend, a company may not exist in the database if
    /// it is the first POST request made by that company. So, information about a company are stored
    /// on demand when a user ask for a service provided by the API backend.
    /// </summary>
    /// <param name="user">a User object that store information provided in JWT access token</param>
    /// <returns></returns>
    public Task createUserInDatabase(User user) {
        using DbConnection conn = dataSource.OpenConnection();
        string table = (User.GetRole(user) == User.Role.FA) ? "company_far" : "company_wsp";
        string industry_sector = (User.GetRole(user) == User.Role.FA) ? "FAR" : "WSP";
        using DbCommand command = conn.CreateCommand();
        command.CommandText="begin transaction isolation level serializable";
        command.ExecuteNonQuery();
        command.CommandText = $@"
            insert into company (vat_number, industry_sector) values($1, $2)
            on conflict do nothing
        ";
        command.Parameters.Add(DbUtility.CreateParameter(conn, DbType.String, user.company_vat_number));
        command.Parameters.Add(DbUtility.CreateParameter(conn, DbType.String, industry_sector));
        command.ExecuteNonQuery();
        command.CommandText = $@"
            insert into {table} (vat_number, industry_sector) values($1, $2)
            on conflict do nothing
        ";
        command.Parameters.Add(DbUtility.CreateParameter(conn, DbType.String, user.company_vat_number));
        command.Parameters.Add(DbUtility.CreateParameter(conn, DbType.String, industry_sector));
        command.ExecuteNonQuery();
        command.CommandText="commit";
        command.ExecuteNonQuery();
        return Task.CompletedTask;
    }

    public void Dispose() {
        
    }
}